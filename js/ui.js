'use strict';

var midi = new Midi();
var sysex = new SysexHandler(midi);

function showError(message) {
	console.log("ERROR: " + message);
	$("#errors").html(message);
}


// Initialization

function initializeApp() {
	midi.initialize(onMidiAvailable, onNoMidi);
	initializeDragAndDrop();
}

function onMidiAvailable(){
	initializeMidiUI();
	readPrefs();	
}

function onNoMidi() {
	// TODO: Show error in UI
	showError("WebMIDI not supported.");
}


function initializeMidiUI() {

	// MIDI port selectors

	//$('#midiIn').selectmenu();
	addOption('#midiIn', midi.NoMidiPortValue);
	midi.getInNames().forEach(name => addOption('#midiIn', name));
	$('#midiIn').change(onMidiInChange);

	//$('#midiOut').selectmenu();
	addOption('#midiOut', midi.NoMidiPortValue);
	midi.getOutNames().forEach(name => addOption('#midiOut', name));
	$('#midiOut').change(onMidiOutChange);

	addOption('#controllerIn', midi.NoMidiPortValue);
	midi.getInNames().forEach(name => addOption('#controllerIn', name));
	$('#controllerIn').change(onControllerInChange);	

	// Patch list
	$('#patchList').accordion({heightStyle: "fill"});
    initializePatchList($('#patchListUser'), "User");
    initializePatchList($('#patchListA'), "Preset A");
    initializePatchList($('#patchListB'), "Preset B");
    initializePatchList($('#patchListC'), "Preset C");
    initializePatchList($('#patchListD'), "Preset D (GM)");
    initializePatchList($('#patchListE'), "Preset E");
    initializePatchList($('#patchListSession'), "Session");
}

function initializeDragAndDrop() {
	// TEST CODE
	window.fd.logging = false;
	var options = {iframe: {url: 'upload.php'}};
	var zone = new FileDrop('zbasic', options);

	zone.event('send', function (files) {
	  files.each(function (file) {
	    file.event('done', function (xhr) {
	      alert('Done uploading ' + this.name + ',' +
	            ' response:\n\n' + xhr.responseText);
	    });

	    file.event('error', function (e, xhr) {
	      alert('Error uploading ' + this.name + ': ' +
	            xhr.status + ', ' + xhr.statusText);
	    });
	    file.readData(onDroppedData,
	      function (e) { alert('Failed to read file.') },
	      'bin');
	  });
	});
	// <iframe> uploads are special - handle them.
	zone.event('iframeDone', function (xhr) {
	  alert('Done uploading via <iframe>, response:\n\n' + xhr.responseText);
	});
	// Toggle multiple file selection in the File Open dialog.
	fd.addEvent(fd.byID('zbasicm'), 'change', function (e) {
	  zone.multiple((e.currentTarget || e.srcElement).checked);
	});
}

function readPrefs() {
	var midiInVal = getPrefs('midiIn');
	if (midiInVal) {
		$('#midiIn').val(midiInVal);
		midi.useMidiIn(midiInVal);
	}

	var midiOutVal = getPrefs('midiOut');
	if (midiOutVal) {
		$('#midiOut').val(midiOutVal);
		midi.useMidiOut(midiOutVal);	
	}

	// var midiEchoVal = getPrefs('midiEcho');
	// if (midiEchoVal != null) {
	// 	$('#midiEcho').prop('checked', midiEchoVal);
	// 	midi.setMidiEcho(midiEchoVal);	
	// }

	var controllerInVal = getPrefs('controllerIn');
	if (controllerInVal) {
		$('#controllerIn').val(controllerInVal);
		midi.useControllerIn(controllerInVal);
	}
}


function initializePatchList(element, bankName) {
	var bank = Banks[bankName];
	var patchList = bank.patches;

	var bankMsb = bank.msb;
	var bankLsb = bank.lsb;

	//element.attr('size', patchList.length);
	var items = '';
	for (var i = 0; i < patchList.length; i++) {
		var patch = patchList[i];
		//element.append($('<option>', {value: i, text: patch.number + ' ' + patch.name}));

		var action = 'midi.sendProgramBankChange(' + i + ',' + bankMsb + ',' + bankLsb + ')';
		items += '<li><span class="number">' + patch.number +
			'</span> <a class="name" href="#"" onclick="' + action + '"">' + patch.name +
			'</a><span class="infobox">' + patch.voices +
			(patch.poly == false ? '<span class="mode">s</span>' : '') +
			'</span></li>';
	};
	element.append(items);
	element.change(function(){
		program = element.val();
		bankMsb = bank.msb;
		bankLsb = bank.lsb;
		console.log("Bank " + bankMsb + " " + bankLsb + ", Program " + program);
		midi.sendProgramBankChange(program, bankMsb, bankLsb);
	});
}


// UI utils

function addOption(selector, val, txt) {
	$(selector).append($('<option>', {value: val, text: txt || val}));
}


// Event handlers

function onMidiInChange() {
	var portName = $("#midiIn").val();
	midi.useMidiIn(portName);
	setPrefs('midiIn', portName);
}

function onMidiOutChange() {
	var portName = $("#midiOut").val();
	midi.useMidiOut(portName);
	setPrefs('midiOut', portName)
}

function onControllerInChange() {
	var portName = $("#controllerIn").val();
	midi.useControllerIn(portName);
	setPrefs('controllerIn', portName)
}

// function onToggleMidiEcho() {
// 	var enable = $("#midiEcho").prop('checked');
// 	midi.setMidiEcho(enable);
// 	setPrefs('midiEcho', enable);
// }

function onSendIdentityRequest() {
	sysex.sendIdentityRequest(
		(eventName, data) => alert("Sysex success: " + eventName),
		(eventName) => alert("Sysex fail: " + eventName));
}

function onSendUserPatchRequest() {
	//var patchNumber = 10;
	var patchNumberStr = $("#patchNumber").val();
	var patchNumber = parseInt(patchNumberStr) - 1;  //parseInt($("#patchNumber").value)-1;
	sysex.sendUserPatchRequest(
		(eventName, patch) => alert("Sysex success: PatchName = " + patch.common.PatchName),
		(eventName) => alert("Sysex fail: " + eventName),
		patchNumber);
}

function onDroppedData(data) {
	var bytes = new Uint8Array(data); // data is ArrayBuffer
	var parser = new SysexParser();
	parser.parse(bytes);
	var message = "Contents:\n";
	parser.errors.map(e =>
		message += "Error: " + e + "\n");
	parser.objects.map(o =>
		message += "Patch " + o.number + ": " + o.common.PatchName + "\n");
	$("#fileContents").html(message);
}

function onTestParseSysexData() {
	var parser = new SysexParser();
	parser.parse(testSysexData);
	var message = "Result:\n";
	parser.errors.map(e =>
		message += "Error: " + e + "\n");
	parser.objects.map(o =>
		message += "Patch " + o.number + ": " + o.common.PatchName + "\n");
	alert(message);
}

var testSysexData = [0xF0, 0x41, 0x10, 0x6A, 0x12, 0x11, 0x00, 0x00,
	0x00, 0x32, 0x34, 0x20, 0x4D, 0x61, 0x79, 0x20, 0x42, 0x61, 0x73,
	0x73, 0x20, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x06, 0x01, 0x1E, 0x07,
	0x01, 0x0F, 0x7F, 0x00, 0x00, 0x64, 0x00, 0x64, 0x00, 0x3F, 0x00,
	0x3F, 0x7F, 0x03, 0x50, 0x00, 0x00, 0x00, 0x02, 0x7F, 0x5A, 0x10,
	0x00, 0x07, 0x08, 0x7F, 0x40, 0x31, 0x02, 0x02, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xF7, 0xF0, 0x41,
	0x10, 0x6A, 0x12, 0x11, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01, 0x07,
	0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0x2F,
	0x7F, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x3F, 0x00, 0x3F, 0x00,
	0x3F, 0x00, 0x3F, 0x02, 0x36, 0x03, 0x54, 0x08, 0x7E, 0x00, 0x3F,
	0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x64,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x24, 0x32, 0x00, 0x0C, 0x0C, 0x32, 0x07, 0x07, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x04,
	0x54, 0x07, 0x37, 0x32, 0x3F, 0x00, 0x32, 0x07, 0x07, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x7F, 0x00,
	0x3C, 0x0E, 0x00, 0x3C, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x0A,
	0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x40, 0x07, 0x00, 0x40, 0x3F, 0x3F,
	0x00, 0x7F, 0x00, 0x64, 0x03, 0xF7, 0xF0, 0x41, 0x10, 0x6A, 0x12,
	0x11, 0x00, 0x12, 0x00, 0x01, 0x00, 0x01, 0x02, 0x09, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7F, 0x2F, 0x7F, 0x00, 0x01,
	0x01, 0x01, 0x01, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F,
	0x02, 0x4D, 0x03, 0x58, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00,
	0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x24,
	0x32, 0x00, 0x0C, 0x0C, 0x32, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x04, 0x3D, 0x0C, 0x29,
	0x32, 0x3F, 0x00, 0x32, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x7F, 0x00, 0x3C, 0x0E, 0x00,
	0x6E, 0x07, 0x07, 0x07, 0x00, 0x0E, 0x48, 0x0A, 0x7F, 0x7F, 0x00,
	0x3F, 0x3F, 0x40, 0x07, 0x00, 0x40, 0x3F, 0x3F, 0x00, 0x7F, 0x00,
	0x00, 0x2E, 0xF7, 0xF0, 0x41, 0x10, 0x6A, 0x12, 0x11, 0x00, 0x14,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x01, 0x7F, 0x00, 0x7F, 0x00, 0x01, 0x01, 0x01, 0x01,
	0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00,
	0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F,
	0x00, 0x3F, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0x32, 0x00, 0x0C,
	0x0C, 0x32, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F,
	0x3F, 0x3F, 0x3F, 0x3F, 0x00, 0x7F, 0x05, 0x00, 0x32, 0x3F, 0x00,
	0x32, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F,
	0x7F, 0x3F, 0x3F, 0x7F, 0x03, 0x3C, 0x07, 0x00, 0x64, 0x07, 0x07,
	0x07, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x40,
	0x07, 0x00, 0x40, 0x3F, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x68, 0xF7,
	0xF0, 0x41, 0x10, 0x6A, 0x12, 0x11, 0x00, 0x16, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
	0x7F, 0x00, 0x7F, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x3F, 0x00,
	0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F,
	0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x3F, 0x00,
	0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x02,
	0x00, 0x00, 0x00, 0x00, 0x30, 0x32, 0x00, 0x0C, 0x0C, 0x32, 0x07,
	0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,
	0x3F, 0x00, 0x7F, 0x05, 0x00, 0x32, 0x3F, 0x00, 0x32, 0x07, 0x07,
	0x07, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F,
	0x7F, 0x03, 0x3C, 0x07, 0x00, 0x64, 0x07, 0x07, 0x07, 0x00, 0x00,
	0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x40, 0x07, 0x00, 0x40,
	0x3F, 0x3F, 0x00, 0x7F, 0x00, 0x00, 0x66, 0xF7];
